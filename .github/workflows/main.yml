# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: CI/CD Pipeline for Frontend and Backend

on:
  workflow_dispatch:  # Trigger on push to the main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      BACKEND_REPO_NAME: "backend"
      FRONTEND_REPO_NAME: "frontend"
      BACKEND_PATH: "backend"
      FRONTEND_PATH: "frontend"
      IMAGE_TAG: "latest"
#      NAMESPACE: "midterm"

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ secrets.AWS_REGION }}

      # Step 4: Build Backend Docker Image with a simple name
      - name: Build Backend Docker image
        run: |
          docker build -t ${{ env.BACKEND_REPO_NAME }} ${{ env.BACKEND_PATH }}
      # Step 5: Tag the Backend Docker Image with ECR URL
      - name: Tag Backend Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag ${{ env.BACKEND_REPO_NAME }} $ECR_REGISTRY/${{ env.BACKEND_REPO_NAME }}:${{ env.IMAGE_TAG }}
      # Step 6: Push the Backend Docker Image to ECR
      - name: Push Backend Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/${{ env.BACKEND_REPO_NAME }}:${{ env.IMAGE_TAG }}
      # Step 7: Build Frontend Docker Image with a simple name
      - name: Build Frontend Docker image
        run: |
          docker build -t ${{ env.FRONTEND_REPO_NAME }} ${{ env.FRONTEND_PATH }}
      # Step 8: Tag the Frontend Docker Image with ECR URL
      - name: Tag Frontend Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag ${{ env.FRONTEND_REPO_NAME }} $ECR_REGISTRY/${{ env.FRONTEND_REPO_NAME }}:${{ env.IMAGE_TAG }}
      # Step 9: Push the Frontend Docker Image to ECR
      - name: Push Frontend Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/${{ env.FRONTEND_REPO_NAME }}:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Verify ECR Image Tag (Frontend)
        run: |
          aws ecr describe-images --repository-name frontend --image-ids imageTag=latest
